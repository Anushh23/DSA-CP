class Solution {
public:
    map<pair<int,int>,vector<pair<int,int>>>mp;
    map<pair<int,int>,int>mpp;
    
    void dfs(int i,int j)
    {
        if(mpp.find({i,j})!=mpp.end()) return;
        mpp[{i,j}]++;
        for(auto u: mp[{i,j}])
        {
            
            dfs(u.first,u.second);
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int i,j,n=grid.size();
        for(i=0;i<n;i++)
        {
            for(j=0;j<grid[i].size();j++)
            {
                if(grid[i][j]=='0') continue;
                if(j-1>=0)
                {
                    if(grid[i][j-1]=='1') mp[{i,j}].push_back({i,j-1});
                }
                if(j+1<grid[i].size())
                {
                    if(grid[i][j+1]=='1') mp[{i,j}].push_back({i,j+1});
                }
                if(i-1>=0)
                {
                    if(grid[i-1][j]=='1') mp[{i,j}].push_back({i-1,j});
                }
                if(i+1<n)
                {
                    if(grid[i+1][j]=='1') mp[{i,j}].push_back({i+1,j});
                }
            }
        }
        int cnt=0;
        for(i=0;i<n;i++)
        {
            for(j=0;j<grid[i].size();j++)
            {
                if(grid[i][j]=='0') continue;
                if(mpp.find({i,j})!=mpp.end()) continue;
                cnt++;
                dfs(i,j);
            }
        }
        
        return cnt;
    }
};