class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i,j,n=s.size();
        if(n==0) return 0;
        map<int,int>mp1,mp2;
        map<char,int>mp;
        for(i=0;i<n;i++)
        {
            if(mp.find(s[i])==mp.end())
            {
                mp2[i]=-1;
                mp[s[i]]=i;
            }
            else
            {
                mp2[i]=mp[s[i]];
                mp[s[i]]=i;
            }
        }
        mp.clear();
        for(i=n-1;i>=0;i--)
        {
            if(mp.find(s[i])==mp.end())
            {
                mp1[i]=-1;
                mp[s[i]]=i;
            }
            else
            {
                mp1[i]=mp[s[i]];
                mp[s[i]]=i;
            }
        }
        int mx_len=1;
        int mn=n;
        int cnt=1;
        if(mp1[0]!=-1){mn=mp1[0];}
        for(i=1;i<n;i++)
        {
           // cout<<i<<" "<<mn<<" "<<cnt<<"|";
            if(i<mn)
            {
               if(mp1[i]!=-1){mn=min(mn,mp1[i]);}
                cnt++;
            }
            else
            {
                mx_len=max(mx_len,cnt);
                cnt=0;
                i=mp2[mn]+1;
                //if(i==mn){i++;}
                if(mp1[i]==-1){mn=n;}
                else{mn=mp1[i];}
                i--;
            }
        }
        mx_len=max(mx_len,cnt);
        
        return mx_len;
    }
};