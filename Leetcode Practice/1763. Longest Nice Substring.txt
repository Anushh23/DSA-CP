class Solution {
public:
    string longestNiceSubstring(string s) {
        vector<string>v;
        int flg=0;
        map<char,int>mp;
        for(int j=0;j<s.size()-1;j++)
        {
            multiset<char>ss;
            string ans="";flg=-1;
            mp.clear();
            map<char,int>mpp1;
            for(int i=j;i<s.size();i++)
            {
                if(s[i]>=97&&s[i]<=122)
                {
                    if(mp.find(s[i])==mp.end()&&mp.find(s[i]-32)==mp.end())
                    {
                        ss.insert(s[i]);mpp1[s[i]]=-1;
                    }
                    else if(mp.find(s[i])==mp.end()&&mp.find(s[i]-32)!=mp.end()){mpp1.erase(s[i]);}
                    mp[s[i]]++;
                }
                else
                {
                   if(mp.find(s[i])==mp.end()&&mp.find(s[i]+32)==mp.end()){mpp1[s[i]+32]=-1;}
                   else if(mp.find(s[i])==mp.end())
                   {
                       if(ss.find(s[i]+32)!=ss.end()){ss.erase(ss.find(s[i]+32));}
                       mpp1.erase(s[i]+32);
                   }
                   mp[s[i]]++; 
                }
                if(ss.size()==0&&i!=j)
                {
                    if(flg==1)
                    {
                        ans+=s[i];
                    }
                    ans="";
                    for(int k=j;k<=i;k++)
                    {
                        ans+=s[k];
                    }
                    flg=1;
                }
                if(ans.size()>0)
                {
                    int pp=0;
                    for(auto u:mpp1)
                    {
                        if(u.second==-1){pp=1;break;}
                    }
                    if(pp==1){continue;}
                    v.push_back(ans);
                    ans="";flg=0;
                }
            }
            ans="";
        }
        map<int,vector<string>>mpp;
        for(int i=0;i<v.size();i++)
        {
            mpp[v[i].size()].push_back(v[i]);
        }
        if(mpp.size()==0){return "";}
        auto it= mpp.end();
        it--;
        string pp1= (*it).second[0];
        return pp1;
    }
};