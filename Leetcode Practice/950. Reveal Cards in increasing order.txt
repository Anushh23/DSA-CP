//Makes use of Recurssion- brute force solution
class Solution {
public:
    vector<int>v;
    void fillDeck(vector<int>&deck,int flg)
    {
        vector<int>v1;
        for(int i=0;i<v.size();i++)
        {
            if(v[i]==0){v1.push_back(i);}
        }
        int j=0,i;
        for(i=flg;i<v1.size();i+=2)
        {
            v[v1[i]]=deck[j];
            j++;
        }
        if(i==v1.size()){flg=0;}
        else{flg=1;}
        vector<int>temp;
        for(;j<deck.size();j++)
        {
            temp.push_back(deck[j]);
        }
        if(temp.size()==0){return;}
        fillDeck(temp,flg);
        
    }
    vector<int> deckRevealedIncreasing(vector<int>& deck) {
       int flg=0;
       sort(deck.begin(),deck.end()); 
       v.resize(deck.size(),0);
       fillDeck(deck,0);
       return v;
    }
};
//Using deque - A better approach -almost same time though
class Solution {
public:
    vector<int> deckRevealedIncreasing(vector<int>& deck) {
       sort(deck.begin(),deck.end()); 
        deque<int>q;
        int i,n=deck.size();
        for(i=deck.size()-1;i>=0;i--)
        {
            if(i!=deck.size()-1)
            {
                q.push_front(q.back());
                q.pop_back();
            }
            q.push_front(deck[i]);
        }
        vector<int>ans;
        while(!q.empty())
        {
           auto it= q.begin();
            ans.push_back(*it);
            q.pop_front();
        }
        return ans;
        
    }
};